name: Run Benchmark


permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      action_input:
        required: false
        type: string

env:
  REPO_OWNER: ${{ github.repository_owner }}
  REPO_NAME: ${{ github.event.repository.name }}
  RELEASE_TAG: "BenchmarkResult"

jobs:
  benchmark:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - uses: actions/checkout@v4

      - name: Run benchmark script
        shell: bash
        run: |
          mkdir -p ./upload
          export CURRENT_OS="${{ matrix.os }}"
          export ACTION_INPUT="${{ inputs.action_input }} "
          chmod +x ./run.sh
          bash run.sh

      - name: Package results
        shell: bash
        id: pack_result
        run: |
          if [ -z "$(ls -A ./upload 2>> /dev/null)" ]; then
            echo "need_upload=false" >> $GITHUB_OUTPUT
            echo "Upload directory is empty."
          else
            echo "need_upload=true" >> $GITHUB_OUTPUT

            mkdir -p ./target/@artifacts/

            cd ./upload
            for item in *; do
              if [ -d "$item" ] || [ -f "$item" ]; then
                zip -r "../target/@artifacts/${item}.zip" "$item"
              fi
            done
            cd ..
          fi

      - name: Upload artifacts
        if: steps.pack_result.outputs.need_upload == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: benchmark result
          path: ./target/@artifacts/*.zip
          retention-days: 1

      - name: Upload Release Assets
        if: steps.pack_result.outputs.need_upload == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ./target/@artifacts/
          for file in *; do
            echo "Uploading $file"
            curl -XPOST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: $(file -b --mime-type $file)" \
              --data-binary @$file \
              "https://uploads.github.com/repos/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}/releases/tags/${{ env.RELEASE_TAG }}/assets?name=$(basename $file)"
          done
